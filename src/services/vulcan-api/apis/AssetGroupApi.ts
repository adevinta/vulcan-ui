/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Asset,
    AssetFromJSON,
    AssetToJSON,
    AssetGroupPayload,
    AssetGroupPayloadFromJSON,
    AssetGroupPayloadToJSON,
} from '../models';

export interface AssetGroupCreateRequest {
    groupId: string;
    teamId: string;
    payload: AssetGroupPayload;
}

export interface AssetGroupDeleteRequest {
    assetId: string;
    groupId: string;
    teamId: string;
}

export interface AssetGroupListRequest {
    groupId: string;
    teamId: string;
}

/**
 * 
 */
export class AssetGroupApi extends runtime.BaseAPI {

    /**
     * Associate an asset to a group.
     * create asset-group
     */
    async assetGroupCreateRaw(requestParameters: AssetGroupCreateRequest): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling assetGroupCreate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetGroupCreate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling assetGroupCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/groups/{group_id}/assets`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetGroupPayloadToJSON(requestParameters.payload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Associate an asset to a group.
     * create asset-group
     */
    async assetGroupCreate(requestParameters: AssetGroupCreateRequest): Promise<Asset> {
        const response = await this.assetGroupCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove an asset from a group.
     * delete asset-group
     */
    async assetGroupDeleteRaw(requestParameters: AssetGroupDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetGroupDelete.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling assetGroupDelete.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetGroupDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/groups/{group_id}/assets/{asset_id}`.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))).replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an asset from a group.
     * delete asset-group
     */
    async assetGroupDelete(requestParameters: AssetGroupDeleteRequest): Promise<void> {
        await this.assetGroupDeleteRaw(requestParameters);
    }

    /**
     * List all assets from a group.
     * list asset-group
     */
    async assetGroupListRaw(requestParameters: AssetGroupListRequest): Promise<runtime.ApiResponse<Array<Asset>>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling assetGroupList.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetGroupList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/groups/{group_id}/assets`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetFromJSON));
    }

    /**
     * List all assets from a group.
     * list asset-group
     */
    async assetGroupList(requestParameters: AssetGroupListRequest): Promise<Array<Asset>> {
        const response = await this.assetGroupListRaw(requestParameters);
        return await response.value();
    }

}
