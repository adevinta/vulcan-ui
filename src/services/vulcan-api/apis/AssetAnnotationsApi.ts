/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetAnnotationDeleteRequest,
  AssetAnnotationRequest,
  AssetannotationsResponse,
} from '../models';
import {
    AssetAnnotationDeleteRequestFromJSON,
    AssetAnnotationDeleteRequestToJSON,
    AssetAnnotationRequestFromJSON,
    AssetAnnotationRequestToJSON,
    AssetannotationsResponseFromJSON,
    AssetannotationsResponseToJSON,
} from '../models';

export interface AssetAnnotationsCreateRequest {
    assetId: string;
    teamId: string;
    payload: AssetAnnotationRequest;
}

export interface AssetAnnotationsDeleteRequest {
    assetId: string;
    teamId: string;
    payload: AssetAnnotationDeleteRequest;
}

export interface AssetAnnotationsListRequest {
    assetId: string;
    teamId: string;
}

export interface AssetAnnotationsPutRequest {
    assetId: string;
    teamId: string;
    payload: AssetAnnotationRequest;
}

export interface AssetAnnotationsUpdateRequest {
    assetId: string;
    teamId: string;
    payload: AssetAnnotationRequest;
}

/**
 * 
 */
export class AssetAnnotationsApi extends runtime.BaseAPI {

    /**
     * Create one or more annotation for a given asset.
     * create asset-annotations
     */
    async assetAnnotationsCreateRaw(requestParameters: AssetAnnotationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetannotationsResponse>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetAnnotationsCreate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetAnnotationsCreate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling assetAnnotationsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/assets/{asset_id}/annotations`.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetAnnotationRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetannotationsResponseFromJSON(jsonValue));
    }

    /**
     * Create one or more annotation for a given asset.
     * create asset-annotations
     */
    async assetAnnotationsCreate(requestParameters: AssetAnnotationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetannotationsResponse> {
        const response = await this.assetAnnotationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete one or more annotation for a given asset.
     * delete asset-annotations
     */
    async assetAnnotationsDeleteRaw(requestParameters: AssetAnnotationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetAnnotationsDelete.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetAnnotationsDelete.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling assetAnnotationsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/assets/{asset_id}/annotations`.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AssetAnnotationDeleteRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete one or more annotation for a given asset.
     * delete asset-annotations
     */
    async assetAnnotationsDelete(requestParameters: AssetAnnotationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetAnnotationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List annotations of a given asset.
     * list asset-annotations
     */
    async assetAnnotationsListRaw(requestParameters: AssetAnnotationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetannotationsResponse>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetAnnotationsList.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetAnnotationsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/assets/{asset_id}/annotations`.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetannotationsResponseFromJSON(jsonValue));
    }

    /**
     * List annotations of a given asset.
     * list asset-annotations
     */
    async assetAnnotationsList(requestParameters: AssetAnnotationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetannotationsResponse> {
        const response = await this.assetAnnotationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Override all annotations with a new list
     * put asset-annotations
     */
    async assetAnnotationsPutRaw(requestParameters: AssetAnnotationsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetannotationsResponse>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetAnnotationsPut.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetAnnotationsPut.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling assetAnnotationsPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/assets/{asset_id}/annotations`.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetAnnotationRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetannotationsResponseFromJSON(jsonValue));
    }

    /**
     * Override all annotations with a new list
     * put asset-annotations
     */
    async assetAnnotationsPut(requestParameters: AssetAnnotationsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetannotationsResponse> {
        const response = await this.assetAnnotationsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update one or more annotation for a given asset.
     * update asset-annotations
     */
    async assetAnnotationsUpdateRaw(requestParameters: AssetAnnotationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetannotationsResponse>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling assetAnnotationsUpdate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling assetAnnotationsUpdate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling assetAnnotationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/assets/{asset_id}/annotations`.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AssetAnnotationRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetannotationsResponseFromJSON(jsonValue));
    }

    /**
     * Update one or more annotation for a given asset.
     * update asset-annotations
     */
    async assetAnnotationsUpdate(requestParameters: AssetAnnotationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetannotationsResponse> {
        const response = await this.assetAnnotationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
