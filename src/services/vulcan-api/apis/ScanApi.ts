/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Scan,
  ScanPayload,
} from '../models';
import {
    ScanFromJSON,
    ScanToJSON,
    ScanPayloadFromJSON,
    ScanPayloadToJSON,
} from '../models';

export interface ScanCreateRequest {
    teamId: string;
    payload: ScanPayload;
}

export interface ScanShowRequest {
    scanId: string;
    teamId: string;
}

/**
 * 
 */
export class ScanApi extends runtime.BaseAPI {

    /**
     * Create scan
     * create scan
     */
    async scanCreateRaw(requestParameters: ScanCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scan>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling scanCreate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling scanCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/scans`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScanPayloadToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanFromJSON(jsonValue));
    }

    /**
     * Create scan
     * create scan
     */
    async scanCreate(requestParameters: ScanCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scan> {
        const response = await this.scanCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Describe scan
     * show scan
     */
    async scanShowRaw(requestParameters: ScanShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Scan>> {
        if (requestParameters.scanId === null || requestParameters.scanId === undefined) {
            throw new runtime.RequiredError('scanId','Required parameter requestParameters.scanId was null or undefined when calling scanShow.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling scanShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/scans/{scan_id}`.replace(`{${"scan_id"}}`, encodeURIComponent(String(requestParameters.scanId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanFromJSON(jsonValue));
    }

    /**
     * Describe scan
     * show scan
     */
    async scanShow(requestParameters: ScanShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Scan> {
        const response = await this.scanShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
