/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PolicySettingPayload,
  PolicySettingUploadPayload,
  Policysetting,
} from '../models';
import {
    PolicySettingPayloadFromJSON,
    PolicySettingPayloadToJSON,
    PolicySettingUploadPayloadFromJSON,
    PolicySettingUploadPayloadToJSON,
    PolicysettingFromJSON,
    PolicysettingToJSON,
} from '../models';

export interface PolicySettingsCreateRequest {
    policyId: string;
    teamId: string;
    payload: PolicySettingPayload;
}

export interface PolicySettingsDeleteRequest {
    policyId: string;
    settingsId: string;
    teamId: string;
}

export interface PolicySettingsListRequest {
    policyId: string;
    teamId: string;
}

export interface PolicySettingsShowRequest {
    policyId: string;
    settingsId: string;
    teamId: string;
}

export interface PolicySettingsUpdateRequest {
    policyId: string;
    settingsId: string;
    teamId: string;
    payload: PolicySettingUploadPayload;
}

/**
 * 
 */
export class PolicySettingsApi extends runtime.BaseAPI {

    /**
     * Create a new policy setting.
     * create policy-settings
     */
    async policySettingsCreateRaw(requestParameters: PolicySettingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Policysetting>> {
        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling policySettingsCreate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling policySettingsCreate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling policySettingsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/policies/{policy_id}/settings`.replace(`{${"policy_id"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicySettingPayloadToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicysettingFromJSON(jsonValue));
    }

    /**
     * Create a new policy setting.
     * create policy-settings
     */
    async policySettingsCreate(requestParameters: PolicySettingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Policysetting> {
        const response = await this.policySettingsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a policy setting.
     * delete policy-settings
     */
    async policySettingsDeleteRaw(requestParameters: PolicySettingsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling policySettingsDelete.');
        }

        if (requestParameters.settingsId === null || requestParameters.settingsId === undefined) {
            throw new runtime.RequiredError('settingsId','Required parameter requestParameters.settingsId was null or undefined when calling policySettingsDelete.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling policySettingsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/policies/{policy_id}/settings/{settings_id}`.replace(`{${"policy_id"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"settings_id"}}`, encodeURIComponent(String(requestParameters.settingsId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a policy setting.
     * delete policy-settings
     */
    async policySettingsDelete(requestParameters: PolicySettingsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policySettingsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List settings for a policy.
     * list policy-settings
     */
    async policySettingsListRaw(requestParameters: PolicySettingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Policysetting>>> {
        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling policySettingsList.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling policySettingsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/policies/{policy_id}/settings`.replace(`{${"policy_id"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicysettingFromJSON));
    }

    /**
     * List settings for a policy.
     * list policy-settings
     */
    async policySettingsList(requestParameters: PolicySettingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Policysetting>> {
        const response = await this.policySettingsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Describe a policy setting.
     * show policy-settings
     */
    async policySettingsShowRaw(requestParameters: PolicySettingsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Policysetting>> {
        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling policySettingsShow.');
        }

        if (requestParameters.settingsId === null || requestParameters.settingsId === undefined) {
            throw new runtime.RequiredError('settingsId','Required parameter requestParameters.settingsId was null or undefined when calling policySettingsShow.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling policySettingsShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/policies/{policy_id}/settings/{settings_id}`.replace(`{${"policy_id"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"settings_id"}}`, encodeURIComponent(String(requestParameters.settingsId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicysettingFromJSON(jsonValue));
    }

    /**
     * Describe a policy setting.
     * show policy-settings
     */
    async policySettingsShow(requestParameters: PolicySettingsShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Policysetting> {
        const response = await this.policySettingsShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a policy setting.
     * update policy-settings
     */
    async policySettingsUpdateRaw(requestParameters: PolicySettingsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Policysetting>> {
        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling policySettingsUpdate.');
        }

        if (requestParameters.settingsId === null || requestParameters.settingsId === undefined) {
            throw new runtime.RequiredError('settingsId','Required parameter requestParameters.settingsId was null or undefined when calling policySettingsUpdate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling policySettingsUpdate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling policySettingsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/policies/{policy_id}/settings/{settings_id}`.replace(`{${"policy_id"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"settings_id"}}`, encodeURIComponent(String(requestParameters.settingsId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PolicySettingUploadPayloadToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicysettingFromJSON(jsonValue));
    }

    /**
     * Update a policy setting.
     * update policy-settings
     */
    async policySettingsUpdate(requestParameters: PolicySettingsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Policysetting> {
        const response = await this.policySettingsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
