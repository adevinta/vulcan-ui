/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CurrentExposure,
    CurrentExposureFromJSON,
    CurrentExposureToJSON,
    Exposure,
    ExposureFromJSON,
    ExposureToJSON,
    Mttr,
    MttrFromJSON,
    MttrToJSON,
} from '../models';

export interface GlobalStatsCurrentExposureRequest {
    maxScore?: number;
    minScore?: number;
}

export interface GlobalStatsExposureRequest {
    atDate?: string;
    maxScore?: number;
    minScore?: number;
}

export interface GlobalStatsMttrRequest {
    maxDate?: string;
    minDate?: string;
}

/**
 * 
 */
export class GlobalStatsApi extends runtime.BaseAPI {

    /**
     * Get global current exposure statistics. This metric takes into account only the exposure for open vulnerabilities since the last time they were detected.
     * current exposure global-stats
     */
    async globalStatsCurrentExposureRaw(requestParameters: GlobalStatsCurrentExposureRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CurrentExposure>> {
        const queryParameters: any = {};

        if (requestParameters.maxScore !== undefined) {
            queryParameters['maxScore'] = requestParameters.maxScore;
        }

        if (requestParameters.minScore !== undefined) {
            queryParameters['minScore'] = requestParameters.minScore;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stats/exposure/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentExposureFromJSON(jsonValue));
    }

    /**
     * Get global current exposure statistics. This metric takes into account only the exposure for open vulnerabilities since the last time they were detected.
     * current exposure global-stats
     */
    async globalStatsCurrentExposure(requestParameters: GlobalStatsCurrentExposureRequest = {}, initOverrides?: RequestInit): Promise<CurrentExposure> {
        const response = await this.globalStatsCurrentExposureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get global exposure statistics. This metric takes into account the exposure across all lifecycle of vulnerabilities.
     * exposure global-stats
     */
    async globalStatsExposureRaw(requestParameters: GlobalStatsExposureRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Exposure>> {
        const queryParameters: any = {};

        if (requestParameters.atDate !== undefined) {
            queryParameters['atDate'] = requestParameters.atDate;
        }

        if (requestParameters.maxScore !== undefined) {
            queryParameters['maxScore'] = requestParameters.maxScore;
        }

        if (requestParameters.minScore !== undefined) {
            queryParameters['minScore'] = requestParameters.minScore;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stats/exposure`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExposureFromJSON(jsonValue));
    }

    /**
     * Get global exposure statistics. This metric takes into account the exposure across all lifecycle of vulnerabilities.
     * exposure global-stats
     */
    async globalStatsExposure(requestParameters: GlobalStatsExposureRequest = {}, initOverrides?: RequestInit): Promise<Exposure> {
        const response = await this.globalStatsExposureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get global MTTR statistics.
     * mttr global-stats
     */
    async globalStatsMttrRaw(requestParameters: GlobalStatsMttrRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Mttr>> {
        const queryParameters: any = {};

        if (requestParameters.maxDate !== undefined) {
            queryParameters['maxDate'] = requestParameters.maxDate;
        }

        if (requestParameters.minDate !== undefined) {
            queryParameters['minDate'] = requestParameters.minDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/stats/mttr`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MttrFromJSON(jsonValue));
    }

    /**
     * Get global MTTR statistics.
     * mttr global-stats
     */
    async globalStatsMttr(requestParameters: GlobalStatsMttrRequest = {}, initOverrides?: RequestInit): Promise<Mttr> {
        const response = await this.globalStatsMttrRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
