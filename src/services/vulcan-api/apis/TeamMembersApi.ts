/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TeamMemberPayload,
  TeamMemberUpdatePayload,
  Teammember,
} from '../models';
import {
    TeamMemberPayloadFromJSON,
    TeamMemberPayloadToJSON,
    TeamMemberUpdatePayloadFromJSON,
    TeamMemberUpdatePayloadToJSON,
    TeammemberFromJSON,
    TeammemberToJSON,
} from '../models';

export interface TeamMembersCreateRequest {
    teamId: string;
    payload: TeamMemberPayload;
}

export interface TeamMembersDeleteRequest {
    teamId: string;
    userId: string;
}

export interface TeamMembersListRequest {
    teamId: string;
}

export interface TeamMembersShowRequest {
    teamId: string;
    userId: string;
}

export interface TeamMembersUpdateRequest {
    teamId: string;
    userId: string;
    payload: TeamMemberUpdatePayload;
}

/**
 * 
 */
export class TeamMembersApi extends runtime.BaseAPI {

    /**
     * Create a team-member association.    ---    At least one of the following fields must be specified: \"email\", \"user_id\".    Otherwise the operation will fail.    If an email is specified, but the user does not exists on the database yet, a new user will be created for that email.    ---    Valid values for \'role\' attribute:    - member    - owner
     * create team-members
     */
    async teamMembersCreateRaw(requestParameters: TeamMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teammember>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamMembersCreate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling teamMembersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/members`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamMemberPayloadToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeammemberFromJSON(jsonValue));
    }

    /**
     * Create a team-member association.    ---    At least one of the following fields must be specified: \"email\", \"user_id\".    Otherwise the operation will fail.    If an email is specified, but the user does not exists on the database yet, a new user will be created for that email.    ---    Valid values for \'role\' attribute:    - member    - owner
     * create team-members
     */
    async teamMembersCreate(requestParameters: TeamMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teammember> {
        const response = await this.teamMembersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a member from a team.
     * delete team-members
     */
    async teamMembersDeleteRaw(requestParameters: TeamMembersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamMembersDelete.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling teamMembersDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/members/{user_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a member from a team.
     * delete team-members
     */
    async teamMembersDelete(requestParameters: TeamMembersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamMembersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List all members from a team.
     * list team-members
     */
    async teamMembersListRaw(requestParameters: TeamMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Teammember>>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamMembersList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/members`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeammemberFromJSON));
    }

    /**
     * List all members from a team.
     * list team-members
     */
    async teamMembersList(requestParameters: TeamMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Teammember>> {
        const response = await this.teamMembersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Describe a team-member association.
     * show team-members
     */
    async teamMembersShowRaw(requestParameters: TeamMembersShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teammember>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamMembersShow.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling teamMembersShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/members/{user_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeammemberFromJSON(jsonValue));
    }

    /**
     * Describe a team-member association.
     * show team-members
     */
    async teamMembersShow(requestParameters: TeamMembersShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teammember> {
        const response = await this.teamMembersShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a team-member association.  Valid values for \'role\' attribute: \'member\', \'owner\'.
     * update team-members
     */
    async teamMembersUpdateRaw(requestParameters: TeamMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teammember>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamMembersUpdate.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling teamMembersUpdate.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling teamMembersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/members/{user_id}`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TeamMemberUpdatePayloadToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeammemberFromJSON(jsonValue));
    }

    /**
     * Update a team-member association.  Valid values for \'role\' attribute: \'member\', \'owner\'.
     * update team-members
     */
    async teamMembersUpdate(requestParameters: TeamMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teammember> {
        const response = await this.teamMembersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
