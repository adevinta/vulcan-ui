/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Mttr,
    MttrFromJSON,
    MttrToJSON,
    Statscoverage,
    StatscoverageFromJSON,
    StatscoverageToJSON,
    Statsfixed,
    StatsfixedFromJSON,
    StatsfixedToJSON,
    Statsopen,
    StatsopenFromJSON,
    StatsopenToJSON,
} from '../models';

export interface StatsCoverageRequest {
    teamId: string;
}

export interface StatsFixedRequest {
    teamId: string;
    atDate?: string;
    maxDate?: string;
    minDate?: string;
}

export interface StatsMttrRequest {
    teamId: string;
    maxDate?: string;
    minDate?: string;
}

export interface StatsOpenRequest {
    teamId: string;
    atDate?: string;
    identifiers?: string;
    maxDate?: string;
    minDate?: string;
}

/**
 * 
 */
export class StatsApi extends runtime.BaseAPI {

    /**
     * Get asset coverage for a team.
     * coverage stats
     */
    async statsCoverageRaw(requestParameters: StatsCoverageRequest): Promise<runtime.ApiResponse<Statscoverage>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling statsCoverage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/stats/coverage`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatscoverageFromJSON(jsonValue));
    }

    /**
     * Get asset coverage for a team.
     * coverage stats
     */
    async statsCoverage(requestParameters: StatsCoverageRequest): Promise<Statscoverage> {
        const response = await this.statsCoverageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get fixed issues statistics for a team.
     * fixed stats
     */
    async statsFixedRaw(requestParameters: StatsFixedRequest): Promise<runtime.ApiResponse<Statsfixed>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling statsFixed.');
        }

        const queryParameters: any = {};

        if (requestParameters.atDate !== undefined) {
            queryParameters['atDate'] = requestParameters.atDate;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['maxDate'] = requestParameters.maxDate;
        }

        if (requestParameters.minDate !== undefined) {
            queryParameters['minDate'] = requestParameters.minDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/stats/fixed`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatsfixedFromJSON(jsonValue));
    }

    /**
     * Get fixed issues statistics for a team.
     * fixed stats
     */
    async statsFixed(requestParameters: StatsFixedRequest): Promise<Statsfixed> {
        const response = await this.statsFixedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get MTR statistics for a team.
     * mttr stats
     */
    async statsMttrRaw(requestParameters: StatsMttrRequest): Promise<runtime.ApiResponse<Mttr>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling statsMttr.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxDate !== undefined) {
            queryParameters['maxDate'] = requestParameters.maxDate;
        }

        if (requestParameters.minDate !== undefined) {
            queryParameters['minDate'] = requestParameters.minDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/stats/mttr`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MttrFromJSON(jsonValue));
    }

    /**
     * Get MTR statistics for a team.
     * mttr stats
     */
    async statsMttr(requestParameters: StatsMttrRequest): Promise<Mttr> {
        const response = await this.statsMttrRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get open issues statistics for a team.
     * open stats
     */
    async statsOpenRaw(requestParameters: StatsOpenRequest): Promise<runtime.ApiResponse<Statsopen>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling statsOpen.');
        }

        const queryParameters: any = {};

        if (requestParameters.atDate !== undefined) {
            queryParameters['atDate'] = requestParameters.atDate;
        }

        if (requestParameters.identifiers !== undefined) {
            queryParameters['identifiers'] = requestParameters.identifiers;
        }

        if (requestParameters.maxDate !== undefined) {
            queryParameters['maxDate'] = requestParameters.maxDate;
        }

        if (requestParameters.minDate !== undefined) {
            queryParameters['minDate'] = requestParameters.minDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/teams/{team_id}/stats/open`.replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatsopenFromJSON(jsonValue));
    }

    /**
     * Get open issues statistics for a team.
     * open stats
     */
    async statsOpen(requestParameters: StatsOpenRequest): Promise<Statsopen> {
        const response = await this.statsOpenRaw(requestParameters);
        return await response.value();
    }

}
