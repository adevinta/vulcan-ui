/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Findings by Target (default view)
 * @export
 * @interface FindingsTarget
 */
export interface FindingsTarget {
    /**
     * Number of findings for the target
     * @type {number}
     * @memberof FindingsTarget
     */
    findingsCount?: number;
    /**
     * Target Identifier
     * @type {string}
     * @memberof FindingsTarget
     */
    identifier?: string;
    /**
     * Number of issues for the target
     * @type {number}
     * @memberof FindingsTarget
     */
    issuesCount?: number;
    /**
     * Max score for the issue among the affected assets
     * @type {number}
     * @memberof FindingsTarget
     */
    maxScore?: number;
    /**
     * Target ID
     * @type {string}
     * @memberof FindingsTarget
     */
    targetId?: string;
}

/**
 * Check if a given object implements the FindingsTarget interface.
 */
export function instanceOfFindingsTarget(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FindingsTargetFromJSON(json: any): FindingsTarget {
    return FindingsTargetFromJSONTyped(json, false);
}

export function FindingsTargetFromJSONTyped(json: any, ignoreDiscriminator: boolean): FindingsTarget {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'findingsCount': !exists(json, 'findings_count') ? undefined : json['findings_count'],
        'identifier': !exists(json, 'identifier') ? undefined : json['identifier'],
        'issuesCount': !exists(json, 'issues_count') ? undefined : json['issues_count'],
        'maxScore': !exists(json, 'max_score') ? undefined : json['max_score'],
        'targetId': !exists(json, 'target_id') ? undefined : json['target_id'],
    };
}

export function FindingsTargetToJSON(value?: FindingsTarget | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'findings_count': value.findingsCount,
        'identifier': value.identifier,
        'issues_count': value.issuesCount,
        'max_score': value.maxScore,
        'target_id': value.targetId,
    };
}

