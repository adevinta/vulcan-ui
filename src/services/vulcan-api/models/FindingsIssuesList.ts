/* tslint:disable */
/* eslint-disable */
/**
 * Vulcan API
 * Public API for Vulcan Vulnerability Scan Engine
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FindingsIssue } from './FindingsIssue';
import {
    FindingsIssueFromJSON,
    FindingsIssueFromJSONTyped,
    FindingsIssueToJSON,
} from './FindingsIssue';
import type { Pagination } from './Pagination';
import {
    PaginationFromJSON,
    PaginationFromJSONTyped,
    PaginationToJSON,
} from './Pagination';

/**
 * Findings by Issue list (default view)
 * @export
 * @interface FindingsIssuesList
 */
export interface FindingsIssuesList {
    /**
     * Findings_issueCollection is the media type for an array of Findings_issue (default view)
     * @type {Array<FindingsIssue>}
     * @memberof FindingsIssuesList
     */
    issues?: Array<FindingsIssue>;
    /**
     * 
     * @type {Pagination}
     * @memberof FindingsIssuesList
     */
    pagination?: Pagination;
}

/**
 * Check if a given object implements the FindingsIssuesList interface.
 */
export function instanceOfFindingsIssuesList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FindingsIssuesListFromJSON(json: any): FindingsIssuesList {
    return FindingsIssuesListFromJSONTyped(json, false);
}

export function FindingsIssuesListFromJSONTyped(json: any, ignoreDiscriminator: boolean): FindingsIssuesList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'issues': !exists(json, 'issues') ? undefined : ((json['issues'] as Array<any>).map(FindingsIssueFromJSON)),
        'pagination': !exists(json, 'pagination') ? undefined : PaginationFromJSON(json['pagination']),
    };
}

export function FindingsIssuesListToJSON(value?: FindingsIssuesList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'issues': value.issues === undefined ? undefined : ((value.issues as Array<any>).map(FindingsIssueToJSON)),
        'pagination': PaginationToJSON(value.pagination),
    };
}

